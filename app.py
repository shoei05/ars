
# ARS Canvas v3 (JP UI)
import streamlit as st
import sqlite3, re
import pandas as pd
from datetime import datetime, timedelta
from dateutil import tz
import random, uuid
from contextlib import contextmanager
import qrcode
from streamlit_autorefresh import st_autorefresh
import os
CREATE_PASS = os.getenv("ARS_CREATE_PASS", "0731")
import os
DEFAULT_BASE_URL = os.getenv("ARS_BASE_URL", "https://arsystem.streamlit.app")
from io import BytesIO

# ---------- Theme & Styles (Focus: readability + friendly spacing) ----------
PAGE_CSS = """
<style>
:root{
  --radius:18px;
  --pad-comfy:18px;
  --pad-cozy:14px;
  --pad-compact:10px;
  --fg:#0f172a;
  --bg:#ffffff;
  --sub:#64748b;
  --hi:#111827;
  --border:#e5e7eb;
}
.block-container{padding-top:0.5rem; padding-bottom:2rem; max-width:1200px;}
header[data-testid="stHeader"]{backdrop-filter: blur(4px);}
/* Sticky tools */
.sticky-tools{ position: sticky; top: 0; z-index: 50; padding: .5rem 0 .75rem;
  background: linear-gradient(180deg, rgba(255,255,255,.95), rgba(255,255,255,.85)); border-bottom:1px solid #eef0f3;}
/* Card */
.ars-card{ border-radius:var(--radius); border:1px solid var(--border);
  background:linear-gradient(180deg,#fff,#fafbfc); box-shadow:0 0 0 1px rgba(0,0,0,0.01), 0 18px 28px -24px rgba(2,6,23,.35);
  padding: var(--pad);}
.ars-meta{ color: var(--sub); font-size:.85rem }
.ars-chip{ display:inline-block; padding:.25rem .6rem; border-radius:999px; border:1px solid var(--border); background:#fff; margin-right:.35rem; font-size:.8rem;}
/* Buttons (bigger hit area) */
button[kind="secondary"], button[kind="primary"]{ padding:.6rem .9rem; border-radius:14px; }
/* Focus */
.ars-focus{ font-size: clamp(34px, 7.5vw, 72px); line-height:1.18; font-weight:800; letter-spacing:.2px; }
/* Line clamp for long comments */
.clamp-4{ display:-webkit-box; -webkit-line-clamp:4; -webkit-box-orient:vertical; overflow:hidden; }
/* High contrast */
.high-contrast .ars-card{ background:#000; color:#fff; border-color:#222;}
.high-contrast .ars-meta{ color:#cbd5e1; }
.high-contrast .stMarkdown, .high-contrast h1,h2,h3,h4{ color:#fff !important;}
/* Grid container */
.grid{ display:grid; grid-template-columns: repeat(var(--cols), 1fr); gap: 12px; }
</style>
"""

# ---------- DB Helpers ----------
import os
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
DB_DIR = os.path.join(BASE_DIR, "data")
os.makedirs(DB_DIR, exist_ok=True)
DB_PATH = os.path.join(DB_DIR, "ars.sqlite")

def _dict_factory(cursor, row):
    return { col[0]: row[idx] for idx, col in enumerate(cursor.description) }

@contextmanager
def get_db():
    conn = sqlite3.connect(DB_PATH, check_same_thread=False)
    conn.row_factory = _dict_factory
    try:
        yield conn
    finally:
        conn.commit(); conn.close()

def init_db():
    with get_db() as conn:
        c = conn.cursor()
        c.execute("""CREATE TABLE IF NOT EXISTS rooms(
            code TEXT PRIMARY KEY,
            title TEXT,
            created_at TEXT,
            focus_comment_id INTEGER,
            admin_pin TEXT,
            is_closed INTEGER DEFAULT 0,
            font_scale REAL DEFAULT 1.15
        )""")
        c.execute("""CREATE TABLE IF NOT EXISTS comments(
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            room_code TEXT,
            author TEXT,
            content TEXT,
            votes INTEGER DEFAULT 0,
            tags TEXT DEFAULT '',
            hidden INTEGER DEFAULT 0,
            created_at TEXT
        )""")
        # migrations
        # comments.hidden
        cols = [r["name"] for r in c.execute("PRAGMA table_info(comments)").fetchall()]
        if "hidden" not in cols:
            c.execute("ALTER TABLE comments ADD COLUMN hidden INTEGER DEFAULT 0")
        # rooms.font_scale
        rcols = [r["name"] for r in c.execute("PRAGMA table_info(rooms)").fetchall()]
        if "font_scale" not in rcols:
            c.execute("ALTER TABLE rooms ADD COLUMN font_scale REAL DEFAULT 1.15")
        # votes table
        c.execute("""CREATE TABLE IF NOT EXISTS votes(
            room_code TEXT,
            comment_id INTEGER,
            voter TEXT,
            created_at TEXT,
            PRIMARY KEY (room_code, comment_id, voter)
        )""")

def is_valid_code(code:str)->bool:
    return bool(re.fullmatch(r"\d{6}", code or ""))

def ensure_room_by_code(code):
    with get_db() as conn:
        return conn.cursor().execute("SELECT * FROM rooms WHERE code=?", (code,)).fetchone()

def create_room(title, admin_pin=None, code=None, creator_pass=None):
    if (creator_pass or "") != CREATE_PASS:
        raise ValueError("‰ΩúÊàê„Éë„Çπ„ÉØ„Éº„Éâ„ÅåÊ≠£„Åó„Åè„ÅÇ„Çä„Åæ„Åõ„Çì„ÄÇ")
    if code and not is_valid_code(code): raise ValueError("„É´„Éº„É†ID„ÅØ6Ê°Å„ÅÆÊï∞Â≠ó„Åß„Åô„ÄÇ")
    code = code or ''.join(random.choices('0123456789', k=6))
    with get_db() as conn:
        c = conn.cursor()
        if ensure_room_by_code(code): raise ValueError("„Åù„ÅÆ„É´„Éº„É†ID„ÅØ‰ΩøÁî®‰∏≠„Åß„Åô„ÄÇ")
        c.execute("INSERT INTO rooms(code,title,created_at,admin_pin) VALUES(?,?,?,?)",
                  (code, title or "Session", datetime.utcnow().isoformat(), admin_pin or ""))
    return code

def add_comment(room_code, author, content):
    if not content or not content.strip(): return
    with get_db() as conn:
        c = conn.cursor()
        r = c.execute("SELECT is_closed FROM rooms WHERE code=?", (room_code,)).fetchone()
        if not r or int(r["is_closed"])==1: return
        c.execute("""INSERT INTO comments(room_code, author, content, created_at)
                     VALUES(?,?,?,?)""", (room_code, author or "", content.strip(), datetime.utcnow().isoformat()))

def vote_comment(comment_id, delta=1):
    with get_db() as conn:
        conn.cursor().execute("UPDATE comments SET votes = COALESCE(votes,0)+? WHERE id=?", (delta, comment_id))

def set_focus(room_code, comment_id):
    with get_db() as conn:
        conn.cursor().execute("UPDATE rooms SET focus_comment_id=? WHERE code=?", (comment_id, room_code))

def tag_comment(comment_id, tag):
    with get_db() as conn:
        c = conn.cursor()
        row = c.execute("SELECT tags FROM comments WHERE id=?", (comment_id,)).fetchone()
        if not row: return
        tags = [t for t in (row["tags"] or "").split(",") if t]
        if tag and tag not in tags: tags.append(tag)
        c.execute("UPDATE comments SET tags=? WHERE id=?", (",".join(tags), comment_id))

def hide_comment(comment_id, hide=True):
    with get_db() as conn:
        conn.cursor().execute("UPDATE comments SET hidden=? WHERE id=?", (1 if hide else 0, comment_id))

def get_comments(room_code, keyword=None, include_hidden=False):
    with get_db() as conn:
        c = conn.cursor()
        sql = "SELECT * FROM comments WHERE room_code=?"
        args = [room_code]
        if not include_hidden: sql += " AND hidden=0"
        if keyword:
            sql += " AND content LIKE ?"; args.append(f"%{keyword}%")
        sql += " ORDER BY votes DESC, created_at DESC"
        return c.execute(sql, tuple(args)).fetchall()

def get_room(room_code):
    with get_db() as conn:
        return conn.cursor().execute("SELECT * FROM rooms WHERE code=?", (room_code,)).fetchone()

def set_room_closed(room_code, closed:bool):
    with get_db() as conn:
        conn.cursor().execute("UPDATE rooms SET is_closed=? WHERE code=?", (1 if closed else 0, room_code))


def has_voted(room_code, comment_id, voter):
    with get_db() as conn:
        c = conn.cursor()
        row = c.execute("SELECT 1 FROM votes WHERE room_code=? AND comment_id=? AND voter=?",
                        (room_code, comment_id, voter)).fetchone()
        return row is not None

def try_vote(room_code, comment_id, voter):
    # returns True if vote recorded, False if duplicate
    if not voter: return False
    with get_db() as conn:
        c = conn.cursor()
        try:
            c.execute("INSERT INTO votes(room_code, comment_id, voter, created_at) VALUES(?,?,?,?)",
                      (room_code, comment_id, voter, datetime.utcnow().isoformat()))
            c.execute("UPDATE comments SET votes = COALESCE(votes,0)+1 WHERE id=?", (comment_id,))
            return True
        except Exception:
            return False

def set_room_font(room_code, scale:float):
    with get_db() as conn:
        conn.cursor().execute("UPDATE rooms SET font_scale=? WHERE code=?", (float(scale), room_code))

# ---------- App ----------
st.set_page_config(page_title="ARS Canvas v3", page_icon="üí¨", layout="wide")
init_db()
st.markdown(PAGE_CSS, unsafe_allow_html=True)

# --- role forcing via query params ---
qp = st.query_params
forced_view = qp.get("view")
if isinstance(forced_view, (list, tuple)):
    forced_view = forced_view[0] if forced_view else None
force_map = {"p":"ÂèÇÂä†ËÄÖ", "o":"Âè∏‰ºöËÄÖ", "j":"„Éó„É≠„Ç∏„Çß„ÇØ„Çø„Éº"}
forced_mode = force_map.get(forced_view) if forced_view else None
lock_flag = qp.get("lock", "0")
if isinstance(lock_flag, (list, tuple)):
    lock_flag = lock_flag[0] if lock_flag else "0"
lock_forced = str(lock_flag).lower() in ("1","true","yes")


if "user_id" not in st.session_state:
    st.session_state.user_id = str(uuid.uuid4())
if "last_refresh" not in st.session_state:
    st.session_state.last_refresh = datetime.utcnow().isoformat()

# Role & global UI
st.sidebar.header("ARS Canvas v3")

if forced_mode and lock_forced:
    mode = forced_mode
    st.sidebar.write(f"„É≠„Éº„É´: **{mode}**Ôºà„É™„É≥„ÇØ„ÅßÂõ∫ÂÆöÔºâ")
else:
    default_idx = {"ÂèÇÂä†ËÄÖ":0,"Âè∏‰ºöËÄÖ":1,"„Éó„É≠„Ç∏„Çß„ÇØ„Çø„Éº":2}.get(forced_mode, 0)
    mode = st.sidebar.radio("„É≠„Éº„É´", ["ÂèÇÂä†ËÄÖ", "Âè∏‰ºöËÄÖ", "„Éó„É≠„Ç∏„Çß„ÇØ„Çø„Éº"], index=default_idx, horizontal=True)


hc = st.sidebar.toggle("È´ò„Ç≥„É≥„Éà„É©„Çπ„ÉàÔºà„Éó„É≠„Ç∏„Çß„ÇØ„Çø„ÉºÂêë„ÅëÔºâ", value=False)
font_scale_local = st.sidebar.slider("ÊñáÂ≠ó„Çµ„Ç§„Ç∫Ôºà„É≠„Éº„Ç´„É´Ôºâ", 0.9, 1.7, 1.15, 0.05)
follow_org = st.sidebar.toggle("Âè∏‰ºöËÄÖ„ÅÆÊñáÂ≠ó„Çµ„Ç§„Ç∫„Å´Âêà„Çè„Åõ„Çã", value=True)
density = st.sidebar.selectbox("Ë°®Á§∫ÂØÜÂ∫¶", ["Comfy","Cozy","Compact"], index=1)
pad = {"Comfy":"var(--pad-comfy)","Cozy":"var(--pad-cozy)","Compact":"var(--pad-compact)"}[density]
cols = st.sidebar.slider("„Ç∞„É™„ÉÉ„ÉâÂàóÔºàÂèÇÂä†ËÄÖ„ÅÆ„Ç∞„É™„ÉÉ„ÉâË°®Á§∫Ôºâ", 1, 3, 2)

effective_scale = (get_room(st.session_state.get("room_code", "")) or {}).get("font_scale", 1.15)
font_scale = effective_scale if follow_org else font_scale_local
st.markdown(f'<div class="{"high-contrast" if hc else ""}" style="font-size:{font_scale}rem; --pad:{pad}; --cols:{cols};">',
            unsafe_allow_html=True)

# Room selection (6-digit)
qp = st.query_params
if "room" in qp and "room_code" not in st.session_state:
    code_from_url = qp.get("room")
    if isinstance(code_from_url, (list, tuple)):
        code_from_url = code_from_url[0] if code_from_url else ""
    if is_valid_code(code_from_url) and ensure_room_by_code(code_from_url):
        st.session_state["room_code"] = code_from_url

with st.sidebar.expander("„É´„Éº„É†‰ΩúÊàêÔºà6Ê°ÅÔºâ", expanded=False):
    new_title = st.text_input("„Çø„Ç§„Éà„É´", value="Session")
    desired = st.text_input("„Ç´„Çπ„Çø„É†IDÔºà6Ê°ÅÊï∞Â≠óÔºâ", placeholder="‰æã: 128947")
    admin_pin = st.text_input("Âè∏‰ºöËÄÖPINÔºà‰ªªÊÑèÔºâ", type="password")
    create_pass = st.text_input("‰ΩúÊàê„Éë„Çπ„ÉØ„Éº„Éâ", type="password", placeholder="0731")
    create_pass = st.text_input("‰ΩúÊàê„Éë„Çπ„ÉØ„Éº„Éâ", type="password", placeholder="0731")
    if st.button("‰ΩúÊàê", use_container_width=True):
        try:
            code = create_room(new_title, admin_pin=admin_pin, code=desired or None, creator_pass=create_pass)
            st.session_state["room_code"] = code
            st.success(f"‰ΩúÊàê„Åó„Åæ„Åó„Åü: {code}")
            st.query_params.update(room=code)
        except Exception as e:
            st.error(str(e))

join_code = st.sidebar.text_input("ÂèÇÂä†IDÔºà6Ê°ÅÔºâ", value=st.session_state.get("room_code","")).strip()
if st.sidebar.button("ÂèÇÂä†", use_container_width=True):
    if is_valid_code(join_code) and ensure_room_by_code(join_code):
        st.session_state["room_code"] = join_code
        st.query_params.update(room=join_code)
    else:
        st.sidebar.error("„É´„Éº„É†„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„ÄÇ")

room_code = st.session_state.get("room_code")
if not room_code:
    st.info("„É´„Éº„É†„Çí‰ΩúÊàê„Åæ„Åü„ÅØÂèÇÂä†„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ")
    st.stop()

room = get_room(room_code)
if not room:
    st.error("„Åù„ÅÆ„É´„Éº„É†„ÅØÂ≠òÂú®„Åó„Åæ„Åõ„Çì„ÄÇ"); st.stop()

# Sticky header
with st.container():
    st.markdown('<div class="sticky-tools">', unsafe_allow_html=True)
    top_left, top_mid, top_right = st.columns([2,4,2])
    with top_left:
        st.subheader(f"Room: {room_code}")
        st.caption(room.get("title",""))
    with top_mid:
        sort = st.segmented_control("„ÇΩ„Éº„Éà", options=["‰∫∫Ê∞óÈ†Ü","Êñ∞ÁùÄ"], default="‰∫∫Ê∞óÈ†Ü")
    with top_right:
        refresh_ms = st.slider("Ëá™ÂãïÊõ¥Êñ∞(ms)", 1000, 5000, 2000, 250, help="‰ºöÂ†¥„Åß„ÅØ 2000ms Êé®Â•®")
    st.markdown('</div>', unsafe_allow_html=True)

# QR absolute link builder
with st.expander("ÂèÇÂä†Áî®URL„Å®QR"):
    link_p = f"{DEFAULT_BASE_URL}/?room={room_code}&view=p&lock=1"
    link_o = f"{DEFAULT_BASE_URL}/?room={room_code}&view=o"
    link_j = f"{DEFAULT_BASE_URL}/?room={room_code}&view=j&lock=1"

    st.markdown("**ÂèÇÂä†ËÄÖÁî®URLÔºà„É≠„Éº„É´Âõ∫ÂÆöÔºâ**")
    st.text_input("Participant URL", value=link_p, disabled=True)
    from io import BytesIO
    buf = BytesIO()
    qrcode.make(link_p).save(buf, format="PNG"); buf.seek(0)
    st.image(buf, caption="ÂèÇÂä†ËÄÖÁî®QRÔºàÈñã„Åè„Å®Ëá™Âãï„ÅßÂèÇÂä†ËÄÖ„É¢„Éº„ÉâÔºâ", width=180)

    st.markdown("**Âè∏‰ºöËÄÖÁî®URLÔºàPINÂøÖÈ†àÔºâ**")
    st.text_input("Organizer URL", value=link_o, disabled=True)

    st.markdown("**„Éó„É≠„Ç∏„Çß„ÇØ„Çø„ÉºÁî®URLÔºà„É≠„Éº„É´Âõ∫ÂÆöÔºâ**")
    st.text_input("Projector URL", value=link_j, disabled=True)

    st.markdown(f"""
**ÂèÇÂä†„ÅÆ„Åó„Åã„Åü**
1. „Çπ„Éû„Éõ„Åß **ÂèÇÂä†ËÄÖÁî®URL** „ÇíÈñã„ÅèÔºà„Åæ„Åü„ÅØ‰∏ä„ÅÆQR„ÇíË™≠„ÅøÂèñ„ÇäÔºâ  
2. „Åù„ÅÆ„Åæ„ÅæÊäïÁ®ø„ÉªüëçÊäïÁ•®„Åå„Åß„Åç„Åæ„ÅôÔºàÂêå„ÅòÊäïÁ®ø„Å∏„ÅØÂêåÁ´ØÊú´„Åß1Âõû„Åæ„ÅßÔºâ
3. „ÇÇ„Åó„Éà„ÉÉ„Éó„Å´Êù•„ÅüÂ†¥Âêà„ÅØ„ÄÅÂ∑¶„ÅÆ **ÂèÇÂä†ID** „Å´ **{room_code}** „ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ
""")

# Auto refresh & last refresh tracking
st_autorefresh(interval=refresh_ms, key="refresh")
last_seen = pd.to_datetime(st.session_state.last_refresh)
# Admin PIN helper
def is_admin_ok():
    if not room.get("admin_pin"): return True
    if st.session_state.get("pin_ok", False): return True
    pin = st.sidebar.text_input("Âè∏‰ºöËÄÖPIN„ÇíÂÖ•Âäõ", type="password", key="pin_input")
    if st.sidebar.button("„É≠„ÉÉ„ÇØËß£Èô§", key="unlock_btn"):
        if pin == room.get("admin_pin"):
            st.session_state["pin_ok"] = True; st.sidebar.success("Ëß£Èô§„Åó„Åæ„Åó„Åü")
        else:
            st.sidebar.error("PIN„ÅåÈÅï„ÅÑ„Åæ„Åô")
    return st.session_state.get("pin_ok", False)

# ---------- PARTICIPANT ----------
if mode == "ÂèÇÂä†ËÄÖ":
    if room.get("is_closed")==1:
        st.warning("ÊäïÁ®ø„ÅØ„ÇØ„É≠„Éº„Ç∫„Åï„Çå„Å¶„ÅÑ„Åæ„ÅôÔºàÂè∏‰ºöËÄÖ„ÅåÂÜçÈñã„Åß„Åç„Åæ„ÅôÔºâ„ÄÇ")
    left, right = st.columns([2,1])
    with left:
        kw = st.text_input("„Ç≠„Éº„ÉØ„Éº„ÉâÁµû„ÇäËæº„Åø", placeholder="‰æã: „Éû„Ç§„ÇØ, ‰∫ã‰æã, ÁÖßÊòé „Å™„Å©")
        rows = get_comments(room_code, keyword=kw)
        if sort == "Êñ∞ÁùÄ":
            rows = sorted(rows, key=lambda x: x["created_at"], reverse=True)

        # List or Grid
        use_grid = st.toggle("„Ç∞„É™„ÉÉ„ÉâË°®Á§∫", value=(cols>1))
        new_badge = lambda created: " üÜï" if pd.to_datetime(created) > last_seen else ""
        if use_grid and cols>1:
            st.markdown('<div class="grid">', unsafe_allow_html=True)
            for r in rows[:300]:
                st.markdown(f'<div class="ars-card">', unsafe_allow_html=True)
                st.markdown(f'**{r["content"]}**{new_badge(r["created_at"])}')
                meta = f'üëç {r["votes"]} „Éª {pd.to_datetime(r["created_at"]).strftime("%H:%M")}'
                st.markdown(f'<div class="ars-meta">{meta}</div>', unsafe_allow_html=True)
                if r["tags"]:
                    for t in r["tags"].split(","):
                        st.markdown(f'<span class="ars-chip">#{t}</span>', unsafe_allow_html=True)
                already = has_voted(room_code, r['id'], st.session_state.user_id)
                st.button(f'üëç {r["votes"]}' if not already else 'ÊäïÁ•®Ê∏à', key=f"up_{r['id']}", disabled=already, on_click=lambda: (try_vote(room_code, r['id'], st.session_state.user_id), st.rerun()))
                st.markdown('</div>', unsafe_allow_html=True)
            st.markdown('</div>', unsafe_allow_html=True)
        else:
            for r in rows[:300]:
                st.markdown(f'<div class="ars-card">', unsafe_allow_html=True)
                st.markdown(f'**{r["content"]}**{new_badge(r["created_at"])}')
                meta = f'üëç {r["votes"]} „Éª {pd.to_datetime(r["created_at"]).strftime("%H:%M")}'
                st.markdown(f'<div class="ars-meta">{meta}</div>', unsafe_allow_html=True)
                if r["tags"]:
                    for t in r["tags"].split(","):
                        st.markdown(f'<span class="ars-chip">#{t}</span>', unsafe_allow_html=True)
                already = has_voted(room_code, r['id'], st.session_state.user_id)
                st.button(f'üëç {r["votes"]}' if not already else 'ÊäïÁ•®Ê∏à', key=f"up_{r['id']}", disabled=already, on_click=lambda: (try_vote(room_code, r['id'], st.session_state.user_id), st.rerun()))
                st.markdown('</div>', unsafe_allow_html=True)

    with right:
        st.markdown("### ÊäïÁ®ø")
        with st.form("compose"):
            author = st.text_input("ÂêçÂâçÔºà‰ªªÊÑèÔºâ", placeholder="ÂåøÂêçÂèØ")
            content = st.text_area("Áô∫Ë®Ä„ÉªË≥™Âïè", height=140, placeholder="„Ç∑„É≥„Éó„É´„Å´1„É°„ÉÉ„Çª„Éº„Ç∏1„Ç¢„Ç§„Éá„Ç¢„Åß")
            submitted = st.form_submit_button("ÈÄÅ‰ø°ÔºàCtrl/Cmd+Enter„Åß„ÇÇÂèØÔºâ", type="primary", use_container_width=True)
            if submitted:
                add_comment(room_code, author, content)
                st.success("ÈÄÅ‰ø°„Åó„Åæ„Åó„Åü")
                st.session_state.last_refresh = datetime.utcnow().isoformat()
                st.rerun()

# ---------- ORGANIZER ----------
elif mode == "Âè∏‰ºöËÄÖ":
    if not is_admin_ok(): st.stop()

    tabs = st.tabs(["„Ç≠„É•„Éº", "„ÇØ„É©„Çπ„Çø", "„É´„Éº„É†Ë®≠ÂÆö"])

    with tabs[0]:
        kw = st.text_input("„Éï„Ç£„É´„Çø", placeholder="„Ç≠„Éº„ÉØ„Éº„Éâ„ÅßÁµû„ÇäËæº„Åø")
        rows = get_comments(room_code, keyword=kw, include_hidden=True)
        if sort == "Êñ∞ÁùÄ":
            rows = sorted(rows, key=lambda x: x["created_at"], reverse=True)

        for r in rows[:400]:
            st.markdown(f'<div class="ars-card">', unsafe_allow_html=True)
            c1, c2, c3, c4, c5 = st.columns([8,1,1,2,2])
            with c1:
                hidden_mark = "ÔºàÈùûË°®Á§∫Ôºâ" if r["hidden"]==1 else ""
                st.markdown(f'**{r["content"]}** {hidden_mark}')
                if r["tags"]:
                    for t in r["tags"].split(","):
                        st.markdown(f'<span class="ars-chip">#{t}</span>', unsafe_allow_html=True)
                st.caption(f'üëç {r["votes"]} „Éª {pd.to_datetime(r["created_at"]).strftime("%H:%M")} „Éª ID {r["id"]}')
            with c2:
                if st.button("Focus", key=f"fc_{r['id']}"):
                    set_focus(room_code, r["id"]); st.toast("„Éï„Ç©„Éº„Ç´„Çπ„Åó„Åæ„Åó„Åü")
            with c3:
                already = has_voted(room_code, r['id'], st.session_state.user_id)
                st.button(f"üëç {r['votes']}" if not already else 'ÊäïÁ•®Ê∏à', key=f"up_org_{r['id']}", disabled=already, on_click=lambda: (try_vote(room_code, r['id'], st.session_state.user_id), st.rerun()))
            with c4:
                tag = st.text_input("„Çø„Ç∞", key=f"tg_{r['id']}", label_visibility="collapsed", placeholder="„Çø„Ç∞ËøΩÂä†")
                if st.button("Ôºã", key=f"tg_btn_{r['id']}"):
                    if tag.strip(): tag_comment(r["id"], tag.strip()); st.rerun()
            with c5:
                toggle = st.toggle("ÈùûË°®Á§∫", value=(r["hidden"]==1), key=f"hd_{r['id']}")
                if toggle != (r["hidden"]==1):
                    hide_comment(r["id"], toggle); st.rerun()
            st.markdown('</div>', unsafe_allow_html=True)

    with tabs[1]:
        st.caption("TF-IDF + KMeans „Åß„ÉÜ„Éº„Éû„ÇíÊääÊè°ÔºàÊúÄÂ§ß6„ÇØ„É©„Çπ„ÇøÔºâ")
        try:
            from sklearn.feature_extraction.text import TfidfVectorizer
            from sklearn.cluster import KMeans
            df = pd.DataFrame(get_comments(room_code, include_hidden=False))
            if df.empty:
                st.info("„Åæ„Å†„Ç≥„É°„É≥„Éà„Åå„ÅÇ„Çä„Åæ„Åõ„Çì„ÄÇ")
            else:
                vec = TfidfVectorizer(max_features=5000, stop_words=None)
                X = vec.fit_transform(df["content"].tolist())
                k = min(6, max(2, int(len(df)/4)))
                model = KMeans(n_clusters=k, n_init=10, random_state=42)
                df["cluster"] = model.fit_predict(X)
                for cid in sorted(df["cluster"].unique()):
                    st.markdown(f"#### „ÇØ„É©„Çπ„Çø {cid}")
                    sub = df[df["cluster"]==cid].sort_values("votes", ascending=False).head(6)
                    for _, r in sub.iterrows():
                        st.markdown(f'<div class="ars-card">{r["content"]} <span class="ars-chip">üëç {int(r["votes"])}</span></div>', unsafe_allow_html=True)
        except Exception as e:
            st.warning(f"„ÇØ„É©„Çπ„Çø„É™„É≥„Ç∞„ÅØÁèæÂú®Âà©Áî®„Åß„Åç„Åæ„Åõ„Çì: {e}")

    
    with tabs[2]:
            c1, c2, c3 = st.columns(3)
            with c1:
                closed = bool(room.get("is_closed")==1)
                new_closed = st.toggle("ÊäïÁ®ø„Çí„ÇØ„É≠„Éº„Ç∫", value=closed)
                if new_closed != closed:
                    set_room_closed(room_code, new_closed); st.rerun()
            with c2:
                if st.button("„Éï„Ç©„Éº„Ç´„ÇπËß£Èô§"):
                    set_focus(room_code, None); st.success("„Éï„Ç©„Éº„Ç´„Çπ„ÇíËß£Èô§„Åó„Åæ„Åó„Åü")
            with c3:
                st.caption("ÂÖ±Êúâ„ÅØ ?room=CODE „ÅÆURL„ÇíÈÖçÂ∏É„Åó„Å¶„Åè„Å†„Åï„ÅÑ")

            st.markdown("#### Ë°®Á§∫Ë®≠ÂÆöÔºàÂèÇÂä†ËÄÖ„Å´ÂêåÊúüÔºâ")
            current_scale = (get_room(room_code) or {}).get("font_scale", 1.15)
            new_scale = st.slider("ÂèÇÂä†ËÄÖ„ÅÆÊñáÂ≠ó„Çµ„Ç§„Ç∫ÔºàÂÖ®Á´ØÊú´„Å´ÂèçÊò†Ôºâ", 0.9, 1.7, float(current_scale), 0.05)
            if st.button("ÈÅ©Áî®Ôºà2Áßí‰ª•ÂÜÖ„Å´ÂÖ®Á´ØÊú´„Å∏ÂèçÊò†Ôºâ"):
                set_room_font(room_code, new_scale)
                st.success("„Éï„Ç©„É≥„Éà„Çµ„Ç§„Ç∫„ÇíÊõ¥Êñ∞„Åó„Åæ„Åó„ÅüÔºàÂèÇÂä†ËÄÖ„ÅåÂêåÊúüON„ÅÆÂ†¥ÂêàÔºâ")
                st.rerun()

# ---------- PROJECTOR ----------

elif mode == "„Éó„É≠„Ç∏„Çß„ÇØ„Çø„Éº":
    r = get_room(room_code)
    colL, colR = st.columns([4,1])
    with colL:
        focus_id = r.get("focus_comment_id")
        if focus_id:
            with get_db() as conn:
                row = conn.cursor().execute("SELECT * FROM comments WHERE id=?", (focus_id,)).fetchone()
            if row and row["hidden"]==0:
                st.markdown('<div class="ars-card ars-focus">', unsafe_allow_html=True)
                st.markdown(row["content"])
                st.markdown('</div>', unsafe_allow_html=True)
            else:
                st.info("„Éï„Ç©„Éº„Ç´„Çπ‰∏≠„ÅÆÁô∫Ë®Ä„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„ÇìÔºàÈùûË°®Á§∫„ÅÆÂèØËÉΩÊÄßÔºâ„ÄÇ")
        else:
            st.info("Âè∏‰ºöËÄÖ„Åå„Éï„Ç©„Éº„Ç´„Çπ„ÇíË®≠ÂÆö„Åô„Çã„Å®„Åì„Åì„Å´Ë°®Á§∫„Åï„Çå„Åæ„Åô„ÄÇ")
    with colR:
        st.markdown("### „É≠„Éº„ÉÜ„Éº„Ç∑„Éß„É≥")
        auto = st.toggle("‰∫∫Ê∞óÈ†Ü„ÇíËá™ÂãïË°®Á§∫Ôºà8Áßí„Åî„Å®Ôºâ", value=False)
        if auto:
            # cycle top 20 comments, excluding hidden
            rows = get_comments(room_code)
            if rows:
                idx = int(datetime.utcnow().timestamp() // 8) % min(20, len(rows))
                set_focus(room_code, rows[idx]["id"])

# Update last_refresh timestamp at end of render
st.session_state.last_refresh = datetime.utcnow().isoformat()

st.markdown("</div>", unsafe_allow_html=True)